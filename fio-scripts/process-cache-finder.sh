#!/usr/bin/env  bash 

########################################################
#
# Run the fio scripts generated by generate-cache-finder
#
########################################################

while getopts ":d:d:v" Option
do
    case $Option in
        d   )   OUTPUTDIR=$OPTARG ;;
        d   )   DEVICE=$OPTARG ;;
        v   )   VERBOSE=1 ;;
        ?   )   echo "Unknown argument $OPTARG" ; exit ;;
    esac
done
if [ ! -z $OUTPUTDIR  ]; then echo "The Destination is $OUTPUTDIR" 
else
	echo "Need to use -d for output directory"
	exit 1
fi

pushd .
cd $OUTPUTDIR
rm output_parsed
for json in $(ls *.fio.out.json|sort -n)
do
    iops_mean=$(jq  '.["jobs"][0]["read"]["iops_mean"]' $json)
    iops=$( jq '.["jobs"][0]["read"]["iops"]' $json)
    filesize=$( jq '.["jobs"][0]["job options"]["size"]' $json)
    usr_cpu=$(jq '.["jobs"][0]["usr_cpu"]' $json)
    sys_cpu=$(jq '.["jobs"][0]["sys_cpu"]' $json)
    clat_ns=$(jq '.["jobs"][0]["read"]["clat_ns"]["mean"]' $json)
    iodepth=$(jq '.["global options"]["iodepth"]' $json)
    bs=$(jq '.["global options"]["bs"]' $json)

    #echo json = $json $iops_mean $iops u:$usr_cpu s:$sys_cpu
    #printf "%-45s : %1.0f  lat_ns=%5.2f u:%2.0f s:%2.0f\n" $json $iops_mean $clat_ns $usr_cpu $sys_cpu
    printf "blocksize %4s filesize %-8s : iops %1.0f  lat_ns %5.2f usr %2.0f sys%2.0f\n" $bs $filesize $iops_mean $clat_ns $usr_cpu $sys_cpu | tee -a output_parsed
done
# Generate little gnuplot script
echo 'set terminal dumb' > plotfile.plt
echo 'plot "output_parsed" using 7 with linespoints' >> plotfile.plt
gnuplot -p plotfile.plt
popd




